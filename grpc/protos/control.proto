// Copyright 2017, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

option java_multiple_files = true;
option java_outer_classname = "ControlProto";

package srecon;

// This is a trivial control API for the workshop's "translator" example
// backend, to inject errors and erratic behaviour.
service TranslatorControl {
  rpc SetBehaviour (BehaviourDefinition) returns (BehaviourReply) {}
}

enum ResultType {
  // The names and values are chosen to match the canonical Status codes.
  OK = 0;
  UNKNOWN = 2;
  DEADLINE_EXCEEDED = 4;
  NOT_FOUND = 5;
  RESOURCE_EXHAUSTED = 8;
  ABORTED = 10;
  UNAVAILABLE = 14;
}

message Jitter {
  int32 mean_ms = 1;
  int32 stddev_ms = 2;
}

message Behaviour {
  ResultType result = 1;
  Jitter jitter = 2;
}

message BehaviourDefinition {
  repeated Behaviour unary = 1;
  repeated Behaviour stream = 2;
}

message BehaviourReply {
  // empty
}
