// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: translator.proto

#include "translator.pb.h"
#include "translator.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace srecon {

static const char* Translator_method_names[] = {
  "/srecon.Translator/Translate",
  "/srecon.Translator/AllTranslations",
};

std::unique_ptr< Translator::Stub> Translator::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Translator::Stub> stub(new Translator::Stub(channel));
  return stub;
}

Translator::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Translate_(Translator_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AllTranslations_(Translator_method_names[1], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status Translator::Stub::Translate(::grpc::ClientContext* context, const ::srecon::TranslationRequest& request, ::srecon::TranslationReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Translate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::srecon::TranslationReply>* Translator::Stub::AsyncTranslateRaw(::grpc::ClientContext* context, const ::srecon::TranslationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::srecon::TranslationReply>::Create(channel_.get(), cq, rpcmethod_Translate_, context, request);
}

::grpc::ClientReader< ::srecon::AllTranslationsReply>* Translator::Stub::AllTranslationsRaw(::grpc::ClientContext* context, const ::srecon::AllTranslationsRequest& request) {
  return new ::grpc::ClientReader< ::srecon::AllTranslationsReply>(channel_.get(), rpcmethod_AllTranslations_, context, request);
}

::grpc::ClientAsyncReader< ::srecon::AllTranslationsReply>* Translator::Stub::AsyncAllTranslationsRaw(::grpc::ClientContext* context, const ::srecon::AllTranslationsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReader< ::srecon::AllTranslationsReply>::Create(channel_.get(), cq, rpcmethod_AllTranslations_, context, request, tag);
}

Translator::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      Translator_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Translator::Service, ::srecon::TranslationRequest, ::srecon::TranslationReply>(
          std::mem_fn(&Translator::Service::Translate), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Translator_method_names[1],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< Translator::Service, ::srecon::AllTranslationsRequest, ::srecon::AllTranslationsReply>(
          std::mem_fn(&Translator::Service::AllTranslations), this)));
}

Translator::Service::~Service() {
}

::grpc::Status Translator::Service::Translate(::grpc::ServerContext* context, const ::srecon::TranslationRequest* request, ::srecon::TranslationReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Translator::Service::AllTranslations(::grpc::ServerContext* context, const ::srecon::AllTranslationsRequest* request, ::grpc::ServerWriter< ::srecon::AllTranslationsReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace srecon

