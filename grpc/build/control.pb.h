// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control.proto

#ifndef PROTOBUF_control_2eproto__INCLUDED
#define PROTOBUF_control_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace srecon {
class Behaviour;
class BehaviourDefaultTypeInternal;
extern BehaviourDefaultTypeInternal _Behaviour_default_instance_;
class BehaviourDefinition;
class BehaviourDefinitionDefaultTypeInternal;
extern BehaviourDefinitionDefaultTypeInternal _BehaviourDefinition_default_instance_;
class BehaviourReply;
class BehaviourReplyDefaultTypeInternal;
extern BehaviourReplyDefaultTypeInternal _BehaviourReply_default_instance_;
class Jitter;
class JitterDefaultTypeInternal;
extern JitterDefaultTypeInternal _Jitter_default_instance_;
}  // namespace srecon

namespace srecon {

namespace protobuf_control_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_control_2eproto

enum ResultType {
  OK = 0,
  UNKNOWN = 2,
  DEADLINE_EXCEEDED = 4,
  NOT_FOUND = 5,
  RESOURCE_EXHAUSTED = 8,
  ABORTED = 10,
  UNAVAILABLE = 14,
  ResultType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ResultType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ResultType_IsValid(int value);
const ResultType ResultType_MIN = OK;
const ResultType ResultType_MAX = UNAVAILABLE;
const int ResultType_ARRAYSIZE = ResultType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultType_descriptor();
inline const ::std::string& ResultType_Name(ResultType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultType_descriptor(), value);
}
inline bool ResultType_Parse(
    const ::std::string& name, ResultType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultType>(
    ResultType_descriptor(), name, value);
}
// ===================================================================

class Jitter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:srecon.Jitter) */ {
 public:
  Jitter();
  virtual ~Jitter();

  Jitter(const Jitter& from);

  inline Jitter& operator=(const Jitter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Jitter(Jitter&& from) noexcept
    : Jitter() {
    *this = ::std::move(from);
  }

  inline Jitter& operator=(Jitter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Jitter& default_instance();

  static inline const Jitter* internal_default_instance() {
    return reinterpret_cast<const Jitter*>(
               &_Jitter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Jitter* other);
  friend void swap(Jitter& a, Jitter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Jitter* New() const PROTOBUF_FINAL { return New(NULL); }

  Jitter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Jitter& from);
  void MergeFrom(const Jitter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Jitter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 mean_ms = 1;
  void clear_mean_ms();
  static const int kMeanMsFieldNumber = 1;
  ::google::protobuf::int32 mean_ms() const;
  void set_mean_ms(::google::protobuf::int32 value);

  // int32 stddev_ms = 2;
  void clear_stddev_ms();
  static const int kStddevMsFieldNumber = 2;
  ::google::protobuf::int32 stddev_ms() const;
  void set_stddev_ms(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:srecon.Jitter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 mean_ms_;
  ::google::protobuf::int32 stddev_ms_;
  mutable int _cached_size_;
  friend struct protobuf_control_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Behaviour : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:srecon.Behaviour) */ {
 public:
  Behaviour();
  virtual ~Behaviour();

  Behaviour(const Behaviour& from);

  inline Behaviour& operator=(const Behaviour& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Behaviour(Behaviour&& from) noexcept
    : Behaviour() {
    *this = ::std::move(from);
  }

  inline Behaviour& operator=(Behaviour&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Behaviour& default_instance();

  static inline const Behaviour* internal_default_instance() {
    return reinterpret_cast<const Behaviour*>(
               &_Behaviour_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Behaviour* other);
  friend void swap(Behaviour& a, Behaviour& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Behaviour* New() const PROTOBUF_FINAL { return New(NULL); }

  Behaviour* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Behaviour& from);
  void MergeFrom(const Behaviour& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Behaviour* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .srecon.Jitter jitter = 2;
  bool has_jitter() const;
  void clear_jitter();
  static const int kJitterFieldNumber = 2;
  const ::srecon::Jitter& jitter() const;
  ::srecon::Jitter* mutable_jitter();
  ::srecon::Jitter* release_jitter();
  void set_allocated_jitter(::srecon::Jitter* jitter);

  // .srecon.ResultType result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::srecon::ResultType result() const;
  void set_result(::srecon::ResultType value);

  // @@protoc_insertion_point(class_scope:srecon.Behaviour)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::srecon::Jitter* jitter_;
  int result_;
  mutable int _cached_size_;
  friend struct protobuf_control_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BehaviourDefinition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:srecon.BehaviourDefinition) */ {
 public:
  BehaviourDefinition();
  virtual ~BehaviourDefinition();

  BehaviourDefinition(const BehaviourDefinition& from);

  inline BehaviourDefinition& operator=(const BehaviourDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BehaviourDefinition(BehaviourDefinition&& from) noexcept
    : BehaviourDefinition() {
    *this = ::std::move(from);
  }

  inline BehaviourDefinition& operator=(BehaviourDefinition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BehaviourDefinition& default_instance();

  static inline const BehaviourDefinition* internal_default_instance() {
    return reinterpret_cast<const BehaviourDefinition*>(
               &_BehaviourDefinition_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(BehaviourDefinition* other);
  friend void swap(BehaviourDefinition& a, BehaviourDefinition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BehaviourDefinition* New() const PROTOBUF_FINAL { return New(NULL); }

  BehaviourDefinition* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BehaviourDefinition& from);
  void MergeFrom(const BehaviourDefinition& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BehaviourDefinition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .srecon.Behaviour unary = 1;
  int unary_size() const;
  void clear_unary();
  static const int kUnaryFieldNumber = 1;
  const ::srecon::Behaviour& unary(int index) const;
  ::srecon::Behaviour* mutable_unary(int index);
  ::srecon::Behaviour* add_unary();
  ::google::protobuf::RepeatedPtrField< ::srecon::Behaviour >*
      mutable_unary();
  const ::google::protobuf::RepeatedPtrField< ::srecon::Behaviour >&
      unary() const;

  // repeated .srecon.Behaviour stream = 2;
  int stream_size() const;
  void clear_stream();
  static const int kStreamFieldNumber = 2;
  const ::srecon::Behaviour& stream(int index) const;
  ::srecon::Behaviour* mutable_stream(int index);
  ::srecon::Behaviour* add_stream();
  ::google::protobuf::RepeatedPtrField< ::srecon::Behaviour >*
      mutable_stream();
  const ::google::protobuf::RepeatedPtrField< ::srecon::Behaviour >&
      stream() const;

  // @@protoc_insertion_point(class_scope:srecon.BehaviourDefinition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::srecon::Behaviour > unary_;
  ::google::protobuf::RepeatedPtrField< ::srecon::Behaviour > stream_;
  mutable int _cached_size_;
  friend struct protobuf_control_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BehaviourReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:srecon.BehaviourReply) */ {
 public:
  BehaviourReply();
  virtual ~BehaviourReply();

  BehaviourReply(const BehaviourReply& from);

  inline BehaviourReply& operator=(const BehaviourReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BehaviourReply(BehaviourReply&& from) noexcept
    : BehaviourReply() {
    *this = ::std::move(from);
  }

  inline BehaviourReply& operator=(BehaviourReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BehaviourReply& default_instance();

  static inline const BehaviourReply* internal_default_instance() {
    return reinterpret_cast<const BehaviourReply*>(
               &_BehaviourReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(BehaviourReply* other);
  friend void swap(BehaviourReply& a, BehaviourReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BehaviourReply* New() const PROTOBUF_FINAL { return New(NULL); }

  BehaviourReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BehaviourReply& from);
  void MergeFrom(const BehaviourReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BehaviourReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:srecon.BehaviourReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_control_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Jitter

// int32 mean_ms = 1;
inline void Jitter::clear_mean_ms() {
  mean_ms_ = 0;
}
inline ::google::protobuf::int32 Jitter::mean_ms() const {
  // @@protoc_insertion_point(field_get:srecon.Jitter.mean_ms)
  return mean_ms_;
}
inline void Jitter::set_mean_ms(::google::protobuf::int32 value) {
  
  mean_ms_ = value;
  // @@protoc_insertion_point(field_set:srecon.Jitter.mean_ms)
}

// int32 stddev_ms = 2;
inline void Jitter::clear_stddev_ms() {
  stddev_ms_ = 0;
}
inline ::google::protobuf::int32 Jitter::stddev_ms() const {
  // @@protoc_insertion_point(field_get:srecon.Jitter.stddev_ms)
  return stddev_ms_;
}
inline void Jitter::set_stddev_ms(::google::protobuf::int32 value) {
  
  stddev_ms_ = value;
  // @@protoc_insertion_point(field_set:srecon.Jitter.stddev_ms)
}

// -------------------------------------------------------------------

// Behaviour

// .srecon.ResultType result = 1;
inline void Behaviour::clear_result() {
  result_ = 0;
}
inline ::srecon::ResultType Behaviour::result() const {
  // @@protoc_insertion_point(field_get:srecon.Behaviour.result)
  return static_cast< ::srecon::ResultType >(result_);
}
inline void Behaviour::set_result(::srecon::ResultType value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:srecon.Behaviour.result)
}

// .srecon.Jitter jitter = 2;
inline bool Behaviour::has_jitter() const {
  return this != internal_default_instance() && jitter_ != NULL;
}
inline void Behaviour::clear_jitter() {
  if (GetArenaNoVirtual() == NULL && jitter_ != NULL) delete jitter_;
  jitter_ = NULL;
}
inline const ::srecon::Jitter& Behaviour::jitter() const {
  const ::srecon::Jitter* p = jitter_;
  // @@protoc_insertion_point(field_get:srecon.Behaviour.jitter)
  return p != NULL ? *p : *reinterpret_cast<const ::srecon::Jitter*>(
      &::srecon::_Jitter_default_instance_);
}
inline ::srecon::Jitter* Behaviour::mutable_jitter() {
  
  if (jitter_ == NULL) {
    jitter_ = new ::srecon::Jitter;
  }
  // @@protoc_insertion_point(field_mutable:srecon.Behaviour.jitter)
  return jitter_;
}
inline ::srecon::Jitter* Behaviour::release_jitter() {
  // @@protoc_insertion_point(field_release:srecon.Behaviour.jitter)
  
  ::srecon::Jitter* temp = jitter_;
  jitter_ = NULL;
  return temp;
}
inline void Behaviour::set_allocated_jitter(::srecon::Jitter* jitter) {
  delete jitter_;
  jitter_ = jitter;
  if (jitter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:srecon.Behaviour.jitter)
}

// -------------------------------------------------------------------

// BehaviourDefinition

// repeated .srecon.Behaviour unary = 1;
inline int BehaviourDefinition::unary_size() const {
  return unary_.size();
}
inline void BehaviourDefinition::clear_unary() {
  unary_.Clear();
}
inline const ::srecon::Behaviour& BehaviourDefinition::unary(int index) const {
  // @@protoc_insertion_point(field_get:srecon.BehaviourDefinition.unary)
  return unary_.Get(index);
}
inline ::srecon::Behaviour* BehaviourDefinition::mutable_unary(int index) {
  // @@protoc_insertion_point(field_mutable:srecon.BehaviourDefinition.unary)
  return unary_.Mutable(index);
}
inline ::srecon::Behaviour* BehaviourDefinition::add_unary() {
  // @@protoc_insertion_point(field_add:srecon.BehaviourDefinition.unary)
  return unary_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::srecon::Behaviour >*
BehaviourDefinition::mutable_unary() {
  // @@protoc_insertion_point(field_mutable_list:srecon.BehaviourDefinition.unary)
  return &unary_;
}
inline const ::google::protobuf::RepeatedPtrField< ::srecon::Behaviour >&
BehaviourDefinition::unary() const {
  // @@protoc_insertion_point(field_list:srecon.BehaviourDefinition.unary)
  return unary_;
}

// repeated .srecon.Behaviour stream = 2;
inline int BehaviourDefinition::stream_size() const {
  return stream_.size();
}
inline void BehaviourDefinition::clear_stream() {
  stream_.Clear();
}
inline const ::srecon::Behaviour& BehaviourDefinition::stream(int index) const {
  // @@protoc_insertion_point(field_get:srecon.BehaviourDefinition.stream)
  return stream_.Get(index);
}
inline ::srecon::Behaviour* BehaviourDefinition::mutable_stream(int index) {
  // @@protoc_insertion_point(field_mutable:srecon.BehaviourDefinition.stream)
  return stream_.Mutable(index);
}
inline ::srecon::Behaviour* BehaviourDefinition::add_stream() {
  // @@protoc_insertion_point(field_add:srecon.BehaviourDefinition.stream)
  return stream_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::srecon::Behaviour >*
BehaviourDefinition::mutable_stream() {
  // @@protoc_insertion_point(field_mutable_list:srecon.BehaviourDefinition.stream)
  return &stream_;
}
inline const ::google::protobuf::RepeatedPtrField< ::srecon::Behaviour >&
BehaviourDefinition::stream() const {
  // @@protoc_insertion_point(field_list:srecon.BehaviourDefinition.stream)
  return stream_;
}

// -------------------------------------------------------------------

// BehaviourReply

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace srecon

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::srecon::ResultType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::srecon::ResultType>() {
  return ::srecon::ResultType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_control_2eproto__INCLUDED
