// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: translator.proto

#ifndef PROTOBUF_translator_2eproto__INCLUDED
#define PROTOBUF_translator_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace srecon {
class AllTranslationsReply;
class AllTranslationsReplyDefaultTypeInternal;
extern AllTranslationsReplyDefaultTypeInternal _AllTranslationsReply_default_instance_;
class AllTranslationsRequest;
class AllTranslationsRequestDefaultTypeInternal;
extern AllTranslationsRequestDefaultTypeInternal _AllTranslationsRequest_default_instance_;
class TranslationReply;
class TranslationReplyDefaultTypeInternal;
extern TranslationReplyDefaultTypeInternal _TranslationReply_default_instance_;
class TranslationRequest;
class TranslationRequestDefaultTypeInternal;
extern TranslationRequestDefaultTypeInternal _TranslationRequest_default_instance_;
}  // namespace srecon

namespace srecon {

namespace protobuf_translator_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_translator_2eproto

// ===================================================================

class TranslationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:srecon.TranslationRequest) */ {
 public:
  TranslationRequest();
  virtual ~TranslationRequest();

  TranslationRequest(const TranslationRequest& from);

  inline TranslationRequest& operator=(const TranslationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TranslationRequest(TranslationRequest&& from) noexcept
    : TranslationRequest() {
    *this = ::std::move(from);
  }

  inline TranslationRequest& operator=(TranslationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TranslationRequest& default_instance();

  static inline const TranslationRequest* internal_default_instance() {
    return reinterpret_cast<const TranslationRequest*>(
               &_TranslationRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TranslationRequest* other);
  friend void swap(TranslationRequest& a, TranslationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TranslationRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  TranslationRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TranslationRequest& from);
  void MergeFrom(const TranslationRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TranslationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string locale = 2;
  void clear_locale();
  static const int kLocaleFieldNumber = 2;
  const ::std::string& locale() const;
  void set_locale(const ::std::string& value);
  #if LANG_CXX11
  void set_locale(::std::string&& value);
  #endif
  void set_locale(const char* value);
  void set_locale(const char* value, size_t size);
  ::std::string* mutable_locale();
  ::std::string* release_locale();
  void set_allocated_locale(::std::string* locale);

  // @@protoc_insertion_point(class_scope:srecon.TranslationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr locale_;
  mutable int _cached_size_;
  friend struct protobuf_translator_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TranslationReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:srecon.TranslationReply) */ {
 public:
  TranslationReply();
  virtual ~TranslationReply();

  TranslationReply(const TranslationReply& from);

  inline TranslationReply& operator=(const TranslationReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TranslationReply(TranslationReply&& from) noexcept
    : TranslationReply() {
    *this = ::std::move(from);
  }

  inline TranslationReply& operator=(TranslationReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TranslationReply& default_instance();

  static inline const TranslationReply* internal_default_instance() {
    return reinterpret_cast<const TranslationReply*>(
               &_TranslationReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TranslationReply* other);
  friend void swap(TranslationReply& a, TranslationReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TranslationReply* New() const PROTOBUF_FINAL { return New(NULL); }

  TranslationReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TranslationReply& from);
  void MergeFrom(const TranslationReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TranslationReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string translation = 1;
  void clear_translation();
  static const int kTranslationFieldNumber = 1;
  const ::std::string& translation() const;
  void set_translation(const ::std::string& value);
  #if LANG_CXX11
  void set_translation(::std::string&& value);
  #endif
  void set_translation(const char* value);
  void set_translation(const char* value, size_t size);
  ::std::string* mutable_translation();
  ::std::string* release_translation();
  void set_allocated_translation(::std::string* translation);

  // @@protoc_insertion_point(class_scope:srecon.TranslationReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr translation_;
  mutable int _cached_size_;
  friend struct protobuf_translator_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllTranslationsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:srecon.AllTranslationsRequest) */ {
 public:
  AllTranslationsRequest();
  virtual ~AllTranslationsRequest();

  AllTranslationsRequest(const AllTranslationsRequest& from);

  inline AllTranslationsRequest& operator=(const AllTranslationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllTranslationsRequest(AllTranslationsRequest&& from) noexcept
    : AllTranslationsRequest() {
    *this = ::std::move(from);
  }

  inline AllTranslationsRequest& operator=(AllTranslationsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllTranslationsRequest& default_instance();

  static inline const AllTranslationsRequest* internal_default_instance() {
    return reinterpret_cast<const AllTranslationsRequest*>(
               &_AllTranslationsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(AllTranslationsRequest* other);
  friend void swap(AllTranslationsRequest& a, AllTranslationsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllTranslationsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AllTranslationsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AllTranslationsRequest& from);
  void MergeFrom(const AllTranslationsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AllTranslationsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string locales = 2;
  int locales_size() const;
  void clear_locales();
  static const int kLocalesFieldNumber = 2;
  const ::std::string& locales(int index) const;
  ::std::string* mutable_locales(int index);
  void set_locales(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_locales(int index, ::std::string&& value);
  #endif
  void set_locales(int index, const char* value);
  void set_locales(int index, const char* value, size_t size);
  ::std::string* add_locales();
  void add_locales(const ::std::string& value);
  #if LANG_CXX11
  void add_locales(::std::string&& value);
  #endif
  void add_locales(const char* value);
  void add_locales(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& locales() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_locales();

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:srecon.AllTranslationsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> locales_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable int _cached_size_;
  friend struct protobuf_translator_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllTranslationsReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:srecon.AllTranslationsReply) */ {
 public:
  AllTranslationsReply();
  virtual ~AllTranslationsReply();

  AllTranslationsReply(const AllTranslationsReply& from);

  inline AllTranslationsReply& operator=(const AllTranslationsReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllTranslationsReply(AllTranslationsReply&& from) noexcept
    : AllTranslationsReply() {
    *this = ::std::move(from);
  }

  inline AllTranslationsReply& operator=(AllTranslationsReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllTranslationsReply& default_instance();

  static inline const AllTranslationsReply* internal_default_instance() {
    return reinterpret_cast<const AllTranslationsReply*>(
               &_AllTranslationsReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(AllTranslationsReply* other);
  friend void swap(AllTranslationsReply& a, AllTranslationsReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllTranslationsReply* New() const PROTOBUF_FINAL { return New(NULL); }

  AllTranslationsReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AllTranslationsReply& from);
  void MergeFrom(const AllTranslationsReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AllTranslationsReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string locale = 2;
  void clear_locale();
  static const int kLocaleFieldNumber = 2;
  const ::std::string& locale() const;
  void set_locale(const ::std::string& value);
  #if LANG_CXX11
  void set_locale(::std::string&& value);
  #endif
  void set_locale(const char* value);
  void set_locale(const char* value, size_t size);
  ::std::string* mutable_locale();
  ::std::string* release_locale();
  void set_allocated_locale(::std::string* locale);

  // string translation = 3;
  void clear_translation();
  static const int kTranslationFieldNumber = 3;
  const ::std::string& translation() const;
  void set_translation(const ::std::string& value);
  #if LANG_CXX11
  void set_translation(::std::string&& value);
  #endif
  void set_translation(const char* value);
  void set_translation(const char* value, size_t size);
  ::std::string* mutable_translation();
  ::std::string* release_translation();
  void set_allocated_translation(::std::string* translation);

  // @@protoc_insertion_point(class_scope:srecon.AllTranslationsReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr locale_;
  ::google::protobuf::internal::ArenaStringPtr translation_;
  mutable int _cached_size_;
  friend struct protobuf_translator_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TranslationRequest

// string message = 1;
inline void TranslationRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TranslationRequest::message() const {
  // @@protoc_insertion_point(field_get:srecon.TranslationRequest.message)
  return message_.GetNoArena();
}
inline void TranslationRequest::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:srecon.TranslationRequest.message)
}
#if LANG_CXX11
inline void TranslationRequest::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:srecon.TranslationRequest.message)
}
#endif
inline void TranslationRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:srecon.TranslationRequest.message)
}
inline void TranslationRequest::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:srecon.TranslationRequest.message)
}
inline ::std::string* TranslationRequest::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:srecon.TranslationRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TranslationRequest::release_message() {
  // @@protoc_insertion_point(field_release:srecon.TranslationRequest.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranslationRequest::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:srecon.TranslationRequest.message)
}

// string locale = 2;
inline void TranslationRequest::clear_locale() {
  locale_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TranslationRequest::locale() const {
  // @@protoc_insertion_point(field_get:srecon.TranslationRequest.locale)
  return locale_.GetNoArena();
}
inline void TranslationRequest::set_locale(const ::std::string& value) {
  
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:srecon.TranslationRequest.locale)
}
#if LANG_CXX11
inline void TranslationRequest::set_locale(::std::string&& value) {
  
  locale_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:srecon.TranslationRequest.locale)
}
#endif
inline void TranslationRequest::set_locale(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:srecon.TranslationRequest.locale)
}
inline void TranslationRequest::set_locale(const char* value, size_t size) {
  
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:srecon.TranslationRequest.locale)
}
inline ::std::string* TranslationRequest::mutable_locale() {
  
  // @@protoc_insertion_point(field_mutable:srecon.TranslationRequest.locale)
  return locale_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TranslationRequest::release_locale() {
  // @@protoc_insertion_point(field_release:srecon.TranslationRequest.locale)
  
  return locale_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranslationRequest::set_allocated_locale(::std::string* locale) {
  if (locale != NULL) {
    
  } else {
    
  }
  locale_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locale);
  // @@protoc_insertion_point(field_set_allocated:srecon.TranslationRequest.locale)
}

// -------------------------------------------------------------------

// TranslationReply

// string translation = 1;
inline void TranslationReply::clear_translation() {
  translation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TranslationReply::translation() const {
  // @@protoc_insertion_point(field_get:srecon.TranslationReply.translation)
  return translation_.GetNoArena();
}
inline void TranslationReply::set_translation(const ::std::string& value) {
  
  translation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:srecon.TranslationReply.translation)
}
#if LANG_CXX11
inline void TranslationReply::set_translation(::std::string&& value) {
  
  translation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:srecon.TranslationReply.translation)
}
#endif
inline void TranslationReply::set_translation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  translation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:srecon.TranslationReply.translation)
}
inline void TranslationReply::set_translation(const char* value, size_t size) {
  
  translation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:srecon.TranslationReply.translation)
}
inline ::std::string* TranslationReply::mutable_translation() {
  
  // @@protoc_insertion_point(field_mutable:srecon.TranslationReply.translation)
  return translation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TranslationReply::release_translation() {
  // @@protoc_insertion_point(field_release:srecon.TranslationReply.translation)
  
  return translation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranslationReply::set_allocated_translation(::std::string* translation) {
  if (translation != NULL) {
    
  } else {
    
  }
  translation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), translation);
  // @@protoc_insertion_point(field_set_allocated:srecon.TranslationReply.translation)
}

// -------------------------------------------------------------------

// AllTranslationsRequest

// string message = 1;
inline void AllTranslationsRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AllTranslationsRequest::message() const {
  // @@protoc_insertion_point(field_get:srecon.AllTranslationsRequest.message)
  return message_.GetNoArena();
}
inline void AllTranslationsRequest::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:srecon.AllTranslationsRequest.message)
}
#if LANG_CXX11
inline void AllTranslationsRequest::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:srecon.AllTranslationsRequest.message)
}
#endif
inline void AllTranslationsRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:srecon.AllTranslationsRequest.message)
}
inline void AllTranslationsRequest::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:srecon.AllTranslationsRequest.message)
}
inline ::std::string* AllTranslationsRequest::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:srecon.AllTranslationsRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AllTranslationsRequest::release_message() {
  // @@protoc_insertion_point(field_release:srecon.AllTranslationsRequest.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllTranslationsRequest::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:srecon.AllTranslationsRequest.message)
}

// repeated string locales = 2;
inline int AllTranslationsRequest::locales_size() const {
  return locales_.size();
}
inline void AllTranslationsRequest::clear_locales() {
  locales_.Clear();
}
inline const ::std::string& AllTranslationsRequest::locales(int index) const {
  // @@protoc_insertion_point(field_get:srecon.AllTranslationsRequest.locales)
  return locales_.Get(index);
}
inline ::std::string* AllTranslationsRequest::mutable_locales(int index) {
  // @@protoc_insertion_point(field_mutable:srecon.AllTranslationsRequest.locales)
  return locales_.Mutable(index);
}
inline void AllTranslationsRequest::set_locales(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:srecon.AllTranslationsRequest.locales)
  locales_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AllTranslationsRequest::set_locales(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:srecon.AllTranslationsRequest.locales)
  locales_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AllTranslationsRequest::set_locales(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  locales_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:srecon.AllTranslationsRequest.locales)
}
inline void AllTranslationsRequest::set_locales(int index, const char* value, size_t size) {
  locales_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:srecon.AllTranslationsRequest.locales)
}
inline ::std::string* AllTranslationsRequest::add_locales() {
  // @@protoc_insertion_point(field_add_mutable:srecon.AllTranslationsRequest.locales)
  return locales_.Add();
}
inline void AllTranslationsRequest::add_locales(const ::std::string& value) {
  locales_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:srecon.AllTranslationsRequest.locales)
}
#if LANG_CXX11
inline void AllTranslationsRequest::add_locales(::std::string&& value) {
  locales_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:srecon.AllTranslationsRequest.locales)
}
#endif
inline void AllTranslationsRequest::add_locales(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  locales_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:srecon.AllTranslationsRequest.locales)
}
inline void AllTranslationsRequest::add_locales(const char* value, size_t size) {
  locales_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:srecon.AllTranslationsRequest.locales)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AllTranslationsRequest::locales() const {
  // @@protoc_insertion_point(field_list:srecon.AllTranslationsRequest.locales)
  return locales_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AllTranslationsRequest::mutable_locales() {
  // @@protoc_insertion_point(field_mutable_list:srecon.AllTranslationsRequest.locales)
  return &locales_;
}

// -------------------------------------------------------------------

// AllTranslationsReply

// string message = 1;
inline void AllTranslationsReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AllTranslationsReply::message() const {
  // @@protoc_insertion_point(field_get:srecon.AllTranslationsReply.message)
  return message_.GetNoArena();
}
inline void AllTranslationsReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:srecon.AllTranslationsReply.message)
}
#if LANG_CXX11
inline void AllTranslationsReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:srecon.AllTranslationsReply.message)
}
#endif
inline void AllTranslationsReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:srecon.AllTranslationsReply.message)
}
inline void AllTranslationsReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:srecon.AllTranslationsReply.message)
}
inline ::std::string* AllTranslationsReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:srecon.AllTranslationsReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AllTranslationsReply::release_message() {
  // @@protoc_insertion_point(field_release:srecon.AllTranslationsReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllTranslationsReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:srecon.AllTranslationsReply.message)
}

// string locale = 2;
inline void AllTranslationsReply::clear_locale() {
  locale_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AllTranslationsReply::locale() const {
  // @@protoc_insertion_point(field_get:srecon.AllTranslationsReply.locale)
  return locale_.GetNoArena();
}
inline void AllTranslationsReply::set_locale(const ::std::string& value) {
  
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:srecon.AllTranslationsReply.locale)
}
#if LANG_CXX11
inline void AllTranslationsReply::set_locale(::std::string&& value) {
  
  locale_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:srecon.AllTranslationsReply.locale)
}
#endif
inline void AllTranslationsReply::set_locale(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:srecon.AllTranslationsReply.locale)
}
inline void AllTranslationsReply::set_locale(const char* value, size_t size) {
  
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:srecon.AllTranslationsReply.locale)
}
inline ::std::string* AllTranslationsReply::mutable_locale() {
  
  // @@protoc_insertion_point(field_mutable:srecon.AllTranslationsReply.locale)
  return locale_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AllTranslationsReply::release_locale() {
  // @@protoc_insertion_point(field_release:srecon.AllTranslationsReply.locale)
  
  return locale_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllTranslationsReply::set_allocated_locale(::std::string* locale) {
  if (locale != NULL) {
    
  } else {
    
  }
  locale_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locale);
  // @@protoc_insertion_point(field_set_allocated:srecon.AllTranslationsReply.locale)
}

// string translation = 3;
inline void AllTranslationsReply::clear_translation() {
  translation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AllTranslationsReply::translation() const {
  // @@protoc_insertion_point(field_get:srecon.AllTranslationsReply.translation)
  return translation_.GetNoArena();
}
inline void AllTranslationsReply::set_translation(const ::std::string& value) {
  
  translation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:srecon.AllTranslationsReply.translation)
}
#if LANG_CXX11
inline void AllTranslationsReply::set_translation(::std::string&& value) {
  
  translation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:srecon.AllTranslationsReply.translation)
}
#endif
inline void AllTranslationsReply::set_translation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  translation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:srecon.AllTranslationsReply.translation)
}
inline void AllTranslationsReply::set_translation(const char* value, size_t size) {
  
  translation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:srecon.AllTranslationsReply.translation)
}
inline ::std::string* AllTranslationsReply::mutable_translation() {
  
  // @@protoc_insertion_point(field_mutable:srecon.AllTranslationsReply.translation)
  return translation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AllTranslationsReply::release_translation() {
  // @@protoc_insertion_point(field_release:srecon.AllTranslationsReply.translation)
  
  return translation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllTranslationsReply::set_allocated_translation(::std::string* translation) {
  if (translation != NULL) {
    
  } else {
    
  }
  translation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), translation);
  // @@protoc_insertion_point(field_set_allocated:srecon.AllTranslationsReply.translation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace srecon

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_translator_2eproto__INCLUDED
